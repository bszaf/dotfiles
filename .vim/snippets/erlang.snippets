# module and export all
snippet mod
	-module(${1:`Filename('', 'my')`}).
	
	-compile([export_all]).
	
	start() ->
	    ${2}
	
	stop() ->
	    ok.
# define directive
snippet def
	-define(${1:macro}, ${2:body}).${3}
# export directive
snippet exp
	-export([${1:function}/${2:arity}]).
# include directive
snippet inc
	-include("${1:file}").${2}
# include library directive
snippet incl
	-include_lib("${1:eunit}/include/$1.hrl").${2}
# behavior directive
snippet beh
	-behaviour(${1:behaviour}).${2}
# if expression
snippet if
	if
	    ${1:guard} ->
	        ${2:body}
	end
# case expression
snippet case
	case ${1:expression} of
	    ${2:pattern} ->
	        ${3:body};
	end
# record directive
snippet rec
	-record(${1:record}, {
	    ${2:field}=${3:value}}).${4}
snippet ct
	-module(${1:`Filename('', '')`}).
	-include_lib("common_test/include/ct.hrl").
	-export([all/0]).
	-export([${2}]).

	all() -> [${3}].${4}

	sample_test(Config) ->
			1 = 1.
snippet doc
	%%--------------------------------------------------------------------
	%% @doc ${1:description}
	%%
	%% @spec () -> any()
	%% @end
	%%--------------------------------------------------------------------
snippet cpr
	%%%-------------------------------------------------------------------
	%%% @author `g:author`
	%%% @copyright (c) `strftime("%Y")` `g:copyright`
	%%% @doc ${1:description}
	%%% @end
	%%% Created : `strftime("%Y-%m-%d")`
	%%%-------------------------------------------------------------------
snippet escript
	#!/usr/bin/env escript
	%% vim: ft=erlang et sts=4 ts=4 sw=4
	%% -*- erlang -*-
	%%! -smp enable -mnesia debug verbose

	main([String]) ->
		ok.
